package model.unaryTests;

import model.*;
import controllers.OverflowException;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.assertEquals;

public class Negate {
    Calculator testModel = new Calculator();
    @Test
    public void negateScenarios() throws OverflowException, DivisionByZeroException, NegativeSqrtException {
        zeroAssertNegate();
        assertNegate("1");
        assertNegate("2");
        assertNegate("3");
        assertNegate("4");
        assertNegate("5");
        assertNegate("6");
        assertNegate("7");
        assertNegate("8");
        assertNegate("9");
        assertNegate("10");
        assertNegate("11");
        assertNegate("43");
        assertNegate("98");
        assertNegate("152");
        assertNegate("278");
        assertNegate("367");
        assertNegate("547");
        assertNegate("562");
        assertNegate("679");
        assertNegate("742");
        assertNegate("893");
        assertNegate("935");
        assertNegate("952");
        assertNegate("999");
        assertNegate("1008");
        assertNegate("2256");
        assertNegate("3173");
        assertNegate("3477");
        assertNegate("3889");
        assertNegate("4378");
        assertNegate("4647");
        assertNegate("5448");
        assertNegate("6271");
        assertNegate("7118");
        assertNegate("8072");
        assertNegate("9112");
        assertNegate("9214");
        assertNegate("55555");
        assertNegate("82534");
        assertNegate("72324911");
        assertNegate("123456789");
        assertNegate("1E+17");
        assertNegate("5.647753E+11");
        assertNegate("7.7655779E+52");
        assertNegate("6.48586754E+98");
        assertNegate("1E+170");
        assertNegate("5.647753E+511");
        assertNegate("7.7655779E+552");
        assertNegate("6.48586754E+598");
        assertNegate("1E+1170");
        assertNegate("5.647753E+1511");
        assertNegate("7.7655779E+1552");
        assertNegate("6.48586754E+1598");
        assertNegate("1E+2170");
        assertNegate("5.647753E+2511");
        assertNegate("7.7655779E+2552");
        assertNegate("6.48586754E+2598");
        assertNegate("1E+3170");
        assertNegate("5.647753E+3511");
        assertNegate("7.7655779E+3552");
        assertNegate("6.48586754E+3598");
        assertNegate("1E+4170");
        assertNegate("5.647753E+4511");
        assertNegate("7.7655779E+4552");
        assertNegate("6.48586754E+4598");
        assertNegate("1E+5170");
        assertNegate("5.647753E+5511");
        assertNegate("7.7655779E+5552");
        assertNegate("6.48586754E+5598");
        assertNegate("1E+6170");
        assertNegate("5.647753E+6511");
        assertNegate("7.7655779E+6552");
        assertNegate("6.48586754E+6598");
        assertNegate("1E+7170");
        assertNegate("5.647753E+7511");
        assertNegate("7.7655779E+7552");
        assertNegate("6.48586754E+7598");
        assertNegate("1E+8170");
        assertNegate("5.647753E+8511");
        assertNegate("7.7655779E+8552");
        assertNegate("6.48586754E+8598");
        assertNegate("1E+9170");
        assertNegate("5.647753E+9511");
        assertNegate("7.7655779E+9552");
        assertNegate("6.48586754E+9598");
        assertNegate("1E+10170");
        assertNegate("5.647753E+10511");
        assertNegate("7.7655779E+10552");
        assertNegate("6.48586754E+10598");
        assertNegate("1E+9999");
        assertNegate("1000000000000000");
        assertNegate("0.01");
        assertNegate("0.02");
        assertNegate("0.03");
        assertNegate("0.04");
        assertNegate("0.05");
        assertNegate("0.06");
        assertNegate("0.07");
        assertNegate("0.08");
        assertNegate("0.09");
        assertNegate("0.0010");
        assertNegate("0.0011");
        assertNegate("0.0043");
        assertNegate("0.0098");
        assertNegate("0.000152");
        assertNegate("0.000278");
        assertNegate("0.000367");
        assertNegate("0.000547");
        assertNegate("0.000562");
        assertNegate("0.000679");
        assertNegate("0.000742");
        assertNegate("0.000893");
        assertNegate("0.000935");
        assertNegate("0.000952");
        assertNegate("0.000999");
        assertNegate("0.00001008");
        assertNegate("0.00002256");
        assertNegate("0.00003173");
        assertNegate("0.00003477");
        assertNegate("0.00003889");
        assertNegate("0.00004378");
        assertNegate("0.00004647");
        assertNegate("0.00005448");
        assertNegate("0.00006271");
        assertNegate("0.00007118");
        assertNegate("0.00008072");
        assertNegate("0.00009112");
        assertNegate("0.00009214");
        assertNegate("0.0000055555");
        assertNegate("0.0000082534");
        assertNegate("0.72324911");
        assertNegate("0.123456789");
        assertNegate("1E-17");
        assertNegate("5.647753E-11");
        assertNegate("7.7655779E-52");
        assertNegate("6.48586754E-98");
        assertNegate("1E-170");
        assertNegate("5.647753E-511");
        assertNegate("7.7655779E-552");
        assertNegate("6.48586754E-598");
        assertNegate("1E-1170");
        assertNegate("5.647753E-1511");
        assertNegate("7.7655779E-1552");
        assertNegate("6.48586754E-1598");
        assertNegate("1E-2170");
        assertNegate("5.647753E-2511");
        assertNegate("7.7655779E-2552");
        assertNegate("6.48586754E-2598");
        assertNegate("1E-3170");
        assertNegate("5.647753E-3511");
        assertNegate("7.7655779E-3552");
        assertNegate("6.48586754E-3598");
        assertNegate("1E-4170");
        assertNegate("5.647753E-4511");
        assertNegate("7.7655779E-4552");
        assertNegate("6.48586754E-4598");
        assertNegate("1E-5170");
        assertNegate("5.647753E-5511");
        assertNegate("7.7655779E-5552");
        assertNegate("6.48586754E-5598");
        assertNegate("1E-6170");
        assertNegate("5.647753E-6511");
        assertNegate("7.7655779E-6552");
        assertNegate("6.48586754E-6598");
        assertNegate("1E-7170");
        assertNegate("5.647753E-7511");
        assertNegate("7.7655779E-7552");
        assertNegate("6.48586754E-7598");
        assertNegate("1E-8170");
        assertNegate("5.647753E-8511");
        assertNegate("7.7655779E-8552");
        assertNegate("6.48586754E-8598");
        assertNegate("1E-9170");
        assertNegate("5.647753E-9511");
        assertNegate("7.7655779E-9552");
        assertNegate("6.48586754E-9598");
        assertNegate("1E-10170");
        assertNegate("5.647753E-10511");
        assertNegate("7.7655779E-10552");
        assertNegate("6.48586754E-10598");
        assertNegate("1E-9999");
    }

    private void zeroAssertNegate() throws DivisionByZeroException, NegativeSqrtException {
        assertEquals("0", testModel.calculate(new BigDecimal("0"), UnaryOperations.NEGATIVE).toString());
        assertEquals("0", testModel.calculate(new BigDecimal( "-0"), UnaryOperations.NEGATIVE).toString());
    }

    private void assertNegate(String number) throws DivisionByZeroException, NegativeSqrtException {
        assertEquals("-" + number, testModel.calculate(new BigDecimal(number), UnaryOperations.NEGATIVE).toString());
        assertEquals(number, testModel.calculate(new BigDecimal("-" + number), UnaryOperations.NEGATIVE).toString());

    }
}
